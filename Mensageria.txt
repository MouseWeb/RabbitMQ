Mensageria

AMQP = protocolo binário, Point-to-Point e Publish-Subscriber. 
STOM = possível usar com clientes Websocket
MQTT = protocolo binário muito eficiente, muito usado com IoT, somente modelo Publisher-Subscriber.

Point-to-Point = Mensagem é processada uma única vez. 
                 Mensagem pra "um único" destinatário. 

Publish-Subscriber = Qualquer interessado pode se inscrever no canal.
                     Todos os inscritos devem receber. 

Document Message = Transmite dados entre aplicações e o consumer decide o que fazer. 

Command Message = Invoca método em outra aplicação/serviço e não espera resposta. 

Event Message = Notificar aos consumidores algo importante aconteceu. 

Domain Events = Alteração significativa em termos de NEGÓCIO. 
                É gerado por uma Agregado em decorrência de um comando (uma operação em trome de NEGÓCIO).

Event-Driven Microservices = usa Domain Events para integração. 

-------------------------------------------------------------------------------------------------------

Publish -> publica em uma EXCHANGE -> que vai rotiar isso para uma -> QUEUE que vai ser consumida pelo um -> CONSUMIDOR. 

EXCHANGE: Tem a tarefa de receber a mensagem enviada pelo produtor e encaminha para a fila destinada pelo produtor 
          para ser consumida pelo consumidor. 

         -- O produtor envia uma mensagem e é interceptada por uma EXCHANGE que vai encaminhar essa mensagem para uma fila 
            e a QUEUE vai amarzenar essa mensagem em fila até o consumidor de fato consuma ela --

          Por quer, ela vai ficar amarzenada ? o consumidor pode está offline, ou pode está fazendo outra tarefa e ele não pode está consumindo essa mensagem em realtime.
          Então ele vai esperar ali, e quando o consumidor estiver pronto para consumila essa mensagem irá ser processada. 


Deadletter: Para controle de erro (caso o producer ou o consumer der algum tipo de erro, essa mensagem irá cair na Deadletter e podemos reprocessar a mensagem).

Queues (Filas): As queues são as filas responsáveis por armazenar as mensagens que serão distribuídas para o canal de saída.

Bindings (Vínculos): Os bindings são caminhos de entrega das mensagens, o exchange utiliza-os para identificar em qual queue a mensagem será entregue.

Exchanges (Permutadores): Os exchanges são os responsáveis por distribuir as mensagens para as queues, utilizando os bindings para identificar a fila de destino daquela mensagem específica.



